// Generated by CoffeeScript 1.3.3
(function() {
  var JQConsole, deepEqual, equal, ok, strictEqual;

  JQConsole = $().jqconsole.JQConsole;

  equal = assert.equal, deepEqual = assert.deepEqual, strictEqual = assert.strictEqual, ok = assert.ok;

  describe('JQConsole', function() {
    var $container, jqconsole;
    $container = $('<div/>');
    jqconsole = new JQConsole($container, 'header', 'prompt_label', 'prompt_continue');
    describe('#constructor', function() {
      it('instantiates', function() {
        equal(jqconsole.header, 'header');
        equal(jqconsole.prompt_label_main, 'prompt_label');
        equal(jqconsole.prompt_label_continue, 'prompt_continue');
        equal(jqconsole.indent_width, 2);
        equal(jqconsole.GetState(), 'output');
        deepEqual(jqconsole.input_queue, []);
        deepEqual(jqconsole.history, []);
        ok(jqconsole.$console.length);
        ok(jqconsole.$console instanceof jQuery);
        equal($container.text().trim(), 'header');
        strictEqual($container.data('jqconsole'), jqconsole);
        ok(jqconsole.$prompt.length);
        return ok(jqconsole.$input_source.length);
      });
      return it('setup events', function(done) {
        var counter, fn;
        counter = 0;
        jqconsole.$input_source.focus(function() {
          return counter++;
        });
        jqconsole.$console.mouseup();
        fn = function() {
          ok(counter);
          return done();
        };
        return setTimeout(fn, 10);
      });
    });
    describe('Shortcuts', function() {
      describe('#RegisterShortcut', function() {
        it('throws if callback not function', function() {
          return assert.throws(function() {
            return jqconsole.RegisterShortcut('b', 'c');
          });
        });
        it('registers shortcut by string', function() {
          var cb;
          cb = function() {};
          jqconsole.RegisterShortcut('a', cb);
          deepEqual(jqconsole.shortcuts['a'.charCodeAt(0)], [cb]);
          return deepEqual(jqconsole.shortcuts['A'.charCodeAt(0)], [cb]);
        });
        it('registers shortcut by charcode', function() {
          var cb;
          cb = function() {};
          jqconsole.RegisterShortcut('c'.charCodeAt(0), cb);
          deepEqual(jqconsole.shortcuts['c'.charCodeAt(0)], [cb]);
          return deepEqual(jqconsole.shortcuts['C'.charCodeAt(0)], [cb]);
        });
        return it('shortcuts must be ascii', function() {
          return assert.throws(function() {
            return jqconsole.RegisterShortcut('ƒ', function() {});
          });
        });
      });
      return describe('#UnRegisterShortcut', function() {
        it('removes all callback for a shortcut', function() {
          var cb;
          cb = function() {};
          jqconsole.RegisterShortcut('a', cb);
          jqconsole.UnRegisterShortcut('a');
          return deepEqual(jqconsole.shortcuts['a'.charCodeAt(0)], void 0);
        });
        return it('removes specific callback', function() {
          var aCb, bCb;
          aCb = function() {};
          bCb = function() {};
          jqconsole.RegisterShortcut('a', aCb);
          jqconsole.RegisterShortcut('a', bCb);
          jqconsole.UnRegisterShortcut('a', aCb);
          return deepEqual(jqconsole.shortcuts['a'.charCodeAt(0)], [bCb]);
        });
      });
    });
    return describe('Prompt Interaction', function() {
      describe('#Prompt', function() {
        after(function() {
          return jqconsole.AbortPrompt();
        });
        return it('inits prompt and auto-focuses', function() {
          var counter, resultCb;
          counter = 0;
          jqconsole.$input_source.focus(function() {
            return counter++;
          });
          resultCb = function() {};
          jqconsole.Prompt(true, resultCb);
          equal(jqconsole.GetState(), 'prompt');
          ok(counter);
          ok(jqconsole.history_active);
          strictEqual(jqconsole.input_callback, resultCb);
          return equal(jqconsole.$prompt.text().trim(), 'prompt_label');
        });
      });
      describe('#AbortPrompt', function() {
        it('aborts the prompt', function() {
          jqconsole.Prompt(true, function() {});
          jqconsole.AbortPrompt();
          return equal(jqconsole.$prompt.text().trim(), '');
        });
        return it('restarts queued prompts', function() {
          var aCb, bCb;
          aCb = function() {};
          jqconsole.Prompt(false, aCb);
          bCb = function() {};
          jqconsole.Prompt(true, bCb);
          strictEqual(jqconsole.input_callback, aCb);
          strictEqual(jqconsole.history_active, false);
          jqconsole.AbortPrompt();
          strictEqual(jqconsole.input_callback, bCb);
          strictEqual(jqconsole.history_active, true);
          return jqconsole.AbortPrompt();
        });
      });
      describe('#_HandleChar', function() {
        before(function() {
          return jqconsole.Prompt(true, function() {});
        });
        after(function() {
          return jqconsole.AbortPrompt();
        });
        return it('handles chars', function() {
          var str, test;
          str = '';
          test = function(ch) {
            var e;
            str += ch;
            e = $.Event('keypress');
            e.which = ch.charCodeAt(0);
            jqconsole.$input_source.trigger(e);
            return equal(jqconsole.$prompt.text().trim(), 'prompt_label' + str);
          };
          test('a');
          test('Z');
          test('$');
          return test('ƒ');
        });
      });
      return describe('#_HandleKey', function() {
        it('handles enter', function() {
          var counter, e;
          counter = 0;
          jqconsole.Prompt(true, function() {
            return counter++;
          });
          e = $.Event('keypress');
          e.which = 'a'.charCodeAt(0);
          jqconsole.$input_source.trigger(e);
          e = $.Event('keydown');
          e.which = 13;
          jqconsole.$input_source.trigger(e);
          ok(counter);
          return equal(jqconsole.$console.find('.jqconsole-old-prompt').last().text().trim(), 'prompt_labela');
        });
        it('handles shift+enter', function() {
          var e;
          jqconsole.Prompt(true, function() {});
          e = $.Event('keydown');
          e.which = 13;
          e.shiftKey = true;
          jqconsole.$input_source.trigger(e);
          equal(jqconsole.$prompt.text().trim(), 'prompt_label \nprompt_continue');
          return jqconsole.AbortPrompt();
        });
        it('handles tab', function() {
          var e;
          jqconsole.Prompt(true, function() {});
          e = $.Event('keypress');
          e.which = 'a'.charCodeAt(0);
          jqconsole.$input_source.trigger(e);
          e = $.Event('keydown');
          e.which = 9;
          jqconsole.$input_source.trigger(e);
          return equal(jqconsole.$prompt.text().trim(), 'prompt_label  a');
        });
        return it('handles shift+tab', function() {
          var e;
          e = $.Event('keydown');
          e.shiftKey = true;
          e.which = 9;
          jqconsole.$input_source.trigger(e);
          return equal(jqconsole.$prompt.text().trim(), 'prompt_labela');
        });
      });
    });
  });

}).call(this);
